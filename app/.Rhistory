#       mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
# g = distance[,'CTD']
# for (elem in 1:k){
#   sp_dist =sp_dist+ (distm(c(data_useri$longitude[elem], data_useri$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
# }
# g <- sqrt(sp_dist/k)
distance <- data_useri%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g <- sqrt(sp_dist/k)
#test_list[["1lilrambo"]]= rep(g, k)
g_list[[name]] = g
}else{
subdata <- split(data_useri, (0:nrow(data_useri)) %/% 7)
sp_dist <- 0
g <- 0
for (i in 1:length(subdata)){
subs_sub_data <- subdata[[i]]
k_i <- nrow(subs_sub_data)
r_long <- sum(subs_sub_data$longitude)/k_i
r_lat <- sum(subs_sub_data$latitude)/k_i
sp_dist <- 0
distance <- subs_sub_data%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g[i] <- sqrt(sp_dist/k_i)
#   for (elem in 1:k_i){
# sp_dist =sp_dist+ (distm(c(subs_sub_data$longitude[elem], subs_sub_data$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
#   }
#   g <- sqrt(sp_dist/k_i)
#g_list[[name]] <- g
#      g_list[[name]] <- append(g_list[[name]], g)
}
g_list[[name]] <- append(g_list[[name]], g)
}
}
rm(g_list)
g_list = list()
for (name in unique(data_f$username)){
data_useri <- data_f[data_f$username == name, c('latitude','longitude')]
k <-  nrow(data_useri)
sp_dist <- 0
g <- 0
if (k<=7){
r_long <- sum(data_useri$longitude)/k
r_lat <- sum(data_useri$latitude)/k
# distance <- data_useri%>%
#       mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
# g = distance[,'CTD']
# for (elem in 1:k){
#   sp_dist =sp_dist+ (distm(c(data_useri$longitude[elem], data_useri$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
# }
# g <- sqrt(sp_dist/k)
distance <- data_useri%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g <- sqrt(sp_dist/k)
#test_list[["1lilrambo"]]= rep(g, k)
g_list[[name]] = g
}else{
subdata <- split(data_useri, (0:nrow(data_useri)) %/% 7)
sp_dist <- 0
g <- 0
for (i in 1:length(subdata)){
subs_sub_data <- subdata[[i]]
k_i <- nrow(subs_sub_data)
r_long <- sum(subs_sub_data$longitude)/k_i
r_lat <- sum(subs_sub_data$latitude)/k_i
sp_dist <- 0
distance <- subs_sub_data%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g[i] <- sqrt(sp_dist/k_i)
#   for (elem in 1:k_i){
# sp_dist =sp_dist+ (distm(c(subs_sub_data$longitude[elem], subs_sub_data$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
#   }
#   g <- sqrt(sp_dist/k_i)
#g_list[[name]] <- g
#      g_list[[name]] <- append(g_list[[name]], g)
}
g_list[[name]] <- append(g_list[[name]], g)
}
}
head(g_list,35)
head(g_list,40)
tail(g_list,40)
rm(g_list)
g_list <- vector(mode = "list", length =335)
#test_list <- vector(mode = 'list', length = 2)
#names(test_list) <- c("admajuniord", "1lilrambo")
names(g_list)=unique(data_f$username)
for (name in unique(data_f$username)){
data_useri <- data_f[data_f$username == name, c('latitude','longitude')]
k <-  nrow(data_useri)
sp_dist <- 0
g <- 0
if (k<=7){
r_long <- sum(data_useri$longitude)/k
r_lat <- sum(data_useri$latitude)/k
# distance <- data_useri%>%
#       mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
# g = distance[,'CTD']
# for (elem in 1:k){
#   sp_dist =sp_dist+ (distm(c(data_useri$longitude[elem], data_useri$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
# }
# g <- sqrt(sp_dist/k)
distance <- data_useri%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g <- sqrt(sp_dist/k)
#test_list[["1lilrambo"]]= rep(g, k)
g_list[[name]] = g
}else{
subdata <- split(data_useri, (0:nrow(data_useri)) %/% 7)
sp_dist <- 0
g <- 0
for (i in 1:length(subdata)){
subs_sub_data <- subdata[[i]]
k_i <- nrow(subs_sub_data)
r_long <- sum(subs_sub_data$longitude)/k_i
r_lat <- sum(subs_sub_data$latitude)/k_i
sp_dist <- 0
distance <- subs_sub_data%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g[i] <- sqrt(sp_dist/k_i)
#   for (elem in 1:k_i){
# sp_dist =sp_dist+ (distm(c(subs_sub_data$longitude[elem], subs_sub_data$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
#   }
#   g <- sqrt(sp_dist/k_i)
#g_list[[name]] <- g
#      g_list[[name]] <- append(g_list[[name]], g)
}
g_list[[name]] <- append(g_list[[name]], g)
}
}
rm(g_list)
g_list <- vector(mode = "list", length =335)
#test_list <- vector(mode = 'list', length = 2)
#names(test_list) <- c("admajuniord", "1lilrambo")
names(g_list)=unique(data_f$username)
for (name in unique(data_f$username)){
data_useri <- data_f[data_f$username == name, c('latitude','longitude')]
k <-  nrow(data_useri)
sp_dist <- 0
g <- 0
if (k<=7){
r_long <- sum(data_useri$longitude)/k
r_lat <- sum(data_useri$latitude)/k
# distance <- data_useri%>%
#       mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
# g = distance[,'CTD']
# for (elem in 1:k){
#   sp_dist =sp_dist+ (distm(c(data_useri$longitude[elem], data_useri$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
# }
# g <- sqrt(sp_dist/k)
distance <- data_useri%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g <- sqrt(sp_dist/k)
#test_list[["1lilrambo"]]= rep(g, k)
g_list[[name]] = g
}else{
subdata <- split(data_useri, (0:nrow(data_useri)) %/% 7)
sp_dist <- 0
g <- 0
for (i in 1:length(subdata)){
subs_sub_data <- subdata[[i]]
k_i <- nrow(subs_sub_data)
r_long <- sum(subs_sub_data$longitude)/k_i
r_lat <- sum(subs_sub_data$latitude)/k_i
sp_dist <- 0
distance <- subs_sub_data%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g[i] <- sqrt(sp_dist/k_i)
#   for (elem in 1:k_i){
# sp_dist =sp_dist+ (distm(c(subs_sub_data$longitude[elem], subs_sub_data$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
#   }
#   g <- sqrt(sp_dist/k_i)
#g_list[[name]] <- g
#      g_list[[name]] <- append(g_list[[name]], g)
}
#    g_list[[name]] <- append(g_list[[name]], g)
g_list[[name]] = g
}
}
data_useri <- data_f[data_f$username == "djfxny", c('latitude','longitude')]
k <-  nrow(data_useri)
sp_dist <- 0
g <- 0
if (k<=7){
r_long <- sum(data_useri$longitude)/k
r_lat <- sum(data_useri$latitude)/k
# distance <- data_useri%>%
#       mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
# g = distance[,'CTD']
# for (elem in 1:k){
#   sp_dist =sp_dist+ (distm(c(data_useri$longitude[elem], data_useri$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
# }
# g <- sqrt(sp_dist/k)
distance <- data_useri%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g <- sqrt(sp_dist/k)
#test_list[["1lilrambo"]]= rep(g, k)
g_list[[name]] = g
}else{
subdata <- split(data_useri, (0:nrow(data_useri)) %/% 7)
sp_dist <- 0
g <- 0
for (i in 1:length(subdata)){
subs_sub_data <- subdata[[i]]
k_i <- nrow(subs_sub_data)
r_long <- sum(subs_sub_data$longitude)/k_i
r_lat <- sum(subs_sub_data$latitude)/k_i
sp_dist <- 0
distance <- subs_sub_data%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g[i] <- sqrt(sp_dist/k_i)
#   for (elem in 1:k_i){
# sp_dist =sp_dist+ (distm(c(subs_sub_data$longitude[elem], subs_sub_data$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
#   }
#   g <- sqrt(sp_dist/k_i)
#g_list[[name]] <- g
#      g_list[[name]] <- append(g_list[[name]], g)
}
#    g_list[[name]] <- append(g_list[[name]], g)
g_list[['"djfxny"']] = g
}
g_list
rm(g_list)
g_list = list()
for (name in unique(data_f$username)){
data_useri <- data_f[data_f$username == "djfxny", c('latitude','longitude')]
k <-  nrow(data_useri)
sp_dist <- 0
g <- 0
if (k<=7){
r_long <- sum(data_useri$longitude)/k
r_lat <- sum(data_useri$latitude)/k
# distance <- data_useri%>%
#       mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
# g = distance[,'CTD']
# for (elem in 1:k){
#   sp_dist =sp_dist+ (distm(c(data_useri$longitude[elem], data_useri$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
# }
# g <- sqrt(sp_dist/k)
distance <- data_useri%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g <- sqrt(sp_dist/k)
#test_list[["1lilrambo"]]= rep(g, k)
g_list[[name]] = g
}else{
subdata <- split(data_useri, (0:nrow(data_useri)) %/% 7)
sp_dist <- 0
g <- 0
for (i in 1:length(subdata)){
subs_sub_data <- subdata[[i]]
k_i <- nrow(subs_sub_data)
r_long <- sum(subs_sub_data$longitude)/k_i
r_lat <- sum(subs_sub_data$latitude)/k_i
sp_dist <- 0
distance <- subs_sub_data%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g[i] <- sqrt(sp_dist/k_i)
#   for (elem in 1:k_i){
# sp_dist =sp_dist+ (distm(c(subs_sub_data$longitude[elem], subs_sub_data$latitude[elem]), c(r_long, r_lat), fun = distHaversine))^2
#   }
#   g <- sqrt(sp_dist/k_i)
#g_list[[name]] <- g
#      g_list[[name]] <- append(g_list[[name]], g)
}
#    g_list[[name]] <- append(g_list[[name]], g)
g_list[['"djfxny"']] = g
}
}
g_list
g
#To calculate gyration
gyration <- function(data_useri){
k <-  nrow(data_useri)
sp_dist <- 0
g <- 0
if (k<=7){
r_long <- sum(data_useri$longitude)/k
r_lat <- sum(data_useri$latitude)/k
distance <- data_useri%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g <- sqrt(sp_dist/k)
g_list[[name]] = g
}else{
subdata <- split(data_useri, (0:nrow(data_useri)) %/% 7)
sp_dist <- 0
g <- 0
for (i in 1:length(subdata)){
subs_sub_data <- subdata[[i]]
k_i <- nrow(subs_sub_data)
r_long <- sum(subs_sub_data$longitude)/k_i
r_lat <- sum(subs_sub_data$latitude)/k_i
sp_dist <- 0
distance <- subs_sub_data%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g[i] <- sqrt(sp_dist/k_i)
}
g_list[[name]] = g
}
}
data_gyration <- dlply(data_f, .(username), gyration)
data_gyration <- daply(data_f, .(username), gyration)
data_gyration <- dlply(data_f, .(username), gyration)
head(data_gyration)
head(data_gyration,20)
head(data_gyration,30)
head(data_gyration,10)
#To calculate gyration
gyration <- function(data_useri){
k <-  nrow(data_useri)
sp_dist <- 0
g <- 0
if (k<=7){
r_long <- sum(data_useri$longitude)/k
r_lat <- sum(data_useri$latitude)/k
distance <- data_useri%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g <- sqrt(sp_dist/k)
return(g)
# g_list[[name]] = g
}else{
subdata <- split(data_useri, (0:nrow(data_useri)) %/% 7)
sp_dist <- 0
g <- 0
for (i in 1:length(subdata)){
subs_sub_data <- subdata[[i]]
k_i <- nrow(subs_sub_data)
r_long <- sum(subs_sub_data$longitude)/k_i
r_lat <- sum(subs_sub_data$latitude)/k_i
sp_dist <- 0
distance <- subs_sub_data%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g[i] <- sqrt(sp_dist/k_i)
}
#    g_list[[name]] = g
return(g)
}
}
data_gyration <- dlply(data_f, .(username), gyration)
ggplot(data = l, mapping = aes(x = week, y = gyration, group = 1))+
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
labs(title = "Gyration for User djfxny", x ="Week", y = "Gyration")
t%>%
group_by(week)%>%
summarise(mean_gyration = mean(gyration))
ggplot(data = l, mapping = aes(x = week, y = gyration, group = 1))+
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
labs(title = "Gyration for User djfxny", x ="Week", y = "Gyration")
head(data_gyration,10)
head(data_gyration,5)
#To calculate gyration
gyration <- function(data_useri){
k <-  nrow(data_useri)
sp_dist <- 0
g <- 0
if (k<=7){
r_long <- sum(data_useri$longitude)/k
r_lat <- sum(data_useri$latitude)/k
distance <- data_useri%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g <- sqrt(sp_dist/k)
return(g)
# g_list[[name]] = g
}else{
subdata <- split(data_useri, (0:nrow(data_useri)) %/% 7)
sp_dist <- 0
g <- 0
for (i in 1:length(subdata)){
subs_sub_data <- subdata[[i]]
k_i <- nrow(subs_sub_data)
r_long <- sum(subs_sub_data$longitude)/k_i
r_lat <- sum(subs_sub_data$latitude)/k_i
sp_dist <- 0
distance <- subs_sub_data%>%
mutate(CTD = distHaversine(cbind(longitude, latitude), cbind(r_long, r_lat)))
sp_dist = sum((distance[,'CTD'])^2)
g[i] <- sqrt(sp_dist/k_i)
}
#    g_list[[name]] = g
return(g)
}
}
data_gyration <- dlply(data_f, .(username), gyration)
head(data_gyration,5)
l
l = data.frame(userid = rep("djfxny",6), week = test, gyration = c(6353.949, 6617.610, 6028.906, 20169.435, 25934.432, 6586.906))
l
shiny::runApp('Desktop/tmp')
shiny::runApp('Desktop/Fall2021-Project2-group6/app')
library(rjson)
base_url <- "https://data.cityofnewyork.us/resource/rc75-m7u3.json"
full_url <- URLencode(base_url)
health_data <- fromJSON(getURL(fill_url))
R.version()
R.version()
Version()
runApp('Desktop')
runApp('Desktop/Fall2021-Project2-group6/app')
library(rjson)
base_url <- "https://data.cityofnewyork.us/resource/rc75-m7u3.json"
full_url <- URLencode(base_url)
health_data <- fromJSON(getURL(fill_url))
dose_data$DATE <- as.Date(dose_data$DATE, '%Y-%m-%d')
dose_data <- read.csv("doses-by-day.csv")
dose_data$DATE <- as.Date(dose_data$DATE, '%Y-%m-%d')
subsetdose <- function(subgroup){
if(subgroup == "dose1"){
data <- dose_data[,c(1,2)]
}
else if(subgroup == "dose2"){
data <- dose_data[,c(1,4)]
}
else if(subgroup == "single"){
data <- dose_data[,c(1,6)]
}
else if(subgroup == "alldose"){
data <- dose_data[,c(1,8)]
}
return(data)
}
b = subsetdose("dose1")
b
dose_by_day_sub <- subsetdose("alldose") %>%
tidyr::pivot_longer(
cols = -DATE,
names_to = "line_var_1",
values_to = "value_1") %>%
dplyr::mutate(line_var_1 = as.factor(line_var_1))
library(dplyr)
dose_by_day_sub <- subsetdose("alldose") %>%
tidyr::pivot_longer(
cols = -DATE,
names_to = "line_var_1",
values_to = "value_1") %>%
dplyr::mutate(line_var_1 = as.factor(line_var_1))
dose_by_day_sub
hchart(dose_by_day_sub, "line",
hcaes(x = DATE, y = value_1, group = line_var_1)) %>%
hc_chart(zoomType = "x") %>%
hc_legend(align = "center", verticalAlign = "bottom",layout = "horizontal") %>%
hc_xAxis(title = list(text = "Date"),
labels = list(format = '{value:%b %d %y}')) %>%
hc_yAxis(title = list(text = "Count"),
tickInterval = 400,
max = max(dose_by_day_sub$value_1)) %>%
hc_title(text = paste0("<b>Covid_19 Number of Vaccines Delivered Summary for ","alldose", ", NY by Date</b>")) %>%
hc_plotOptions(area = list(lineWidth = 0.5)) %>%
hc_exporting(enabled = TRUE)
library(highcharter)
hchart(dose_by_day_sub, "line",
hcaes(x = DATE, y = value_1, group = line_var_1)) %>%
hc_chart(zoomType = "x") %>%
hc_legend(align = "center", verticalAlign = "bottom",layout = "horizontal") %>%
hc_xAxis(title = list(text = "Date"),
labels = list(format = '{value:%b %d %y}')) %>%
hc_yAxis(title = list(text = "Count"),
tickInterval = 400,
max = max(dose_by_day_sub$value_1)) %>%
hc_title(text = paste0("<b>Covid_19 Number of Vaccines Delivered Summary for ","alldose", ", NY by Date</b>")) %>%
hc_plotOptions(area = list(lineWidth = 0.5)) %>%
hc_exporting(enabled = TRUE)
dose_by_day_sub <- subsetdose("dose1") %>%
tidyr::pivot_longer(
cols = -DATE,
names_to = "line_var_1",
values_to = "value_1") %>%
dplyr::mutate(line_var_1 = as.factor(line_var_1))
dose_by_day_sub
hchart(dose_by_day_sub, "line",
hcaes(x = DATE, y = value_1, group = line_var_1)) %>%
hc_chart(zoomType = "x") %>%
hc_legend(align = "center", verticalAlign = "bottom",layout = "horizontal") %>%
hc_xAxis(title = list(text = "Date"),
labels = list(format = '{value:%b %d %y}')) %>%
hc_yAxis(title = list(text = "Count"),
tickInterval = 400,
max = max(dose_by_day_sub$value_1)) %>%
hc_title(text = paste0("<b>Covid_19 Number of Vaccines Delivered Summary for ","alldose", ", NY by Date</b>")) %>%
hc_plotOptions(area = list(lineWidth = 0.5)) %>%
hc_exporting(enabled = TRUE)
hchart(dose_by_day_sub, "line",
hcaes(x = DATE, y = value_1, group = line_var_1)) %>%
hc_chart(zoomType = "x") %>%
hc_legend(align = "center", verticalAlign = "bottom",layout = "horizontal") %>%
hc_xAxis(title = list(text = "Date"),
labels = list(format = '{value:%b %d %y}')) %>%
hc_yAxis(title = list(text = "Count"),
tickInterval = 400,
max = max(dose_by_day_sub$value_1)) %>%
hc_title(text = paste0("<b>Covid_19 Number of Vaccines Delivered Summary for ","dose1", ", NY by Date</b>")) %>%
hc_plotOptions(area = list(lineWidth = 0.5)) %>%
hc_exporting(enabled = TRUE)
shiny::runApp('Desktop/Fall2021-Project2-group6/app')
runApp('Desktop/Fall2021-Project2-group6/app')
